package be.brusselsbook.sql;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import be.brusselsbook.sql.exception.DatabaseAccessException;
import be.brusselsbook.utils.AccessUtils;

public abstract class DataAccess<T> implements Indexable<T>{

	protected final AccessFactory accessFactory;

	protected DataAccess(AccessFactory accessFactory) {
		this.accessFactory = accessFactory;
	}
	
	protected abstract String SELECTBY(String by);

	protected abstract String SELECTALL();

	protected abstract String INSERT();

	protected abstract T map(ResultSet resultSet) throws SQLException;
	
	@Override
	public T create(Object... objects) {
		T data = null;
		ResultSet autoGeneratedValues = AccessUtils.executeInsert(accessFactory, INSERT(), objects);
		if (AccessUtils.next(autoGeneratedValues)) {
			Long id = AccessUtils.getLongFirstColumn(autoGeneratedValues);
			data = withId(id);
		} else {
			throw new DatabaseAccessException("Failed to generate the Data ID.");
		}
		AccessUtils.close(autoGeneratedValues);
		return data;
	}
	
	protected T safeMap(ResultSet resultSet) throws DatabaseAccessException{
		try {
			return map(resultSet);
		} catch (SQLException e) {
			throw new DatabaseAccessException(e);
		}
	}
	
	public List<T> getObjects() throws DatabaseAccessException{
		List<T> objects = new ArrayList<T>();
		ResultSet resultSet = AccessUtils.executeQuery(accessFactory, SELECTALL());
		while(AccessUtils.next(resultSet)){
			objects.add(safeMap(resultSet));	
		}
		return objects;
	}
	
	protected T with(String sqlQuery, Object... objects) throws DatabaseAccessException {
		T data = null;
		ResultSet resultSet = AccessUtils.executeQuery(accessFactory, sqlQuery, objects);
		if (AccessUtils.next(resultSet)) {
			data = safeMap(resultSet);
		}
		AccessUtils.close(resultSet);
		return data;
	}

}
